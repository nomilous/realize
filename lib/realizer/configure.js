// Generated by CoffeeScript 1.6.3
var coffee, configure, deferred, error, fs, pipeline, _ref;

_ref = require('also'), deferred = _ref.deferred, pipeline = _ref.pipeline;

fs = require('fs');

error = require('./error');

coffee = require('coffee-script');

module.exports = configure = deferred(function(action, params) {
  var compile, filename, interpret, marshal, notify, read, reject, resolve, validate;
  if (params == null) {
    params = {};
  }
  resolve = action.resolve, reject = action.reject, notify = action.notify;
  filename = params.filename;
  validate = deferred(function(_arg) {
    var reject, resolve;
    resolve = _arg.resolve, reject = _arg.reject;
    if (filename != null) {
      return resolve();
    }
    return reject(error({
      errno: 101,
      code: 'ENOREALIZER',
      message: 'No realizer specified. (-f <file>)'
    }));
  });
  read = deferred(function(_arg) {
    var reject, resolve;
    resolve = _arg.resolve, reject = _arg.reject;
    return fs.readFile(filename, 'utf8', function(err, content) {
      if (err != null) {
        return reject(err);
      }
      return resolve(content);
    });
  });
  compile = deferred(function(_arg, source) {
    var err, reject, resolve;
    resolve = _arg.resolve, reject = _arg.reject;
    try {
      return resolve(coffee.compile(source, {
        bare: true
      }));
    } catch (_error) {
      err = _error;
      return reject(error({
        errno: 102,
        code: 'ENOCOMPILE',
        message: err.toString(),
        detail: {
          location: err.location
        }
      }));
    }
  });
  interpret = deferred(function(_arg, realizer) {
    var err, reject, resolve;
    resolve = _arg.resolve, reject = _arg.reject;
    try {
      return resolve(eval(realizer));
    } catch (_error) {
      err = _error;
      return reject(error({
        errno: 103,
        code: 'ENOEVAL',
        message: err.toString()
      }));
    }
  });
  marshal = deferred(function(_arg, object) {
    var reject, resolve;
    resolve = _arg.resolve, reject = _arg.reject;
    return console.log(object);
  });
  return pipeline([
    function() {
      return validate();
    }, function() {
      return read();
    }, function(source) {
      return compile(source);
    }, function(realizer) {
      return interpret(realizer);
    }, function(object) {
      return marshal(object);
    }
  ]).then(resolve, reject, notify);
});
