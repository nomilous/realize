// Generated by CoffeeScript 1.6.3
var deferred, error, hostname, phrase, run;

deferred = require('also').deferred;

hostname = require('os').hostname;

phrase = require('phrase');

error = require('./error');

module.exports = run = deferred(function(action, controls) {
  var load, notify, opts, phraseRecursor, readyCount, realizerFn, reject, resolve, uplink,
    _this = this;
  resolve = action.resolve, reject = action.reject, notify = action.notify;
  uplink = controls.uplink, opts = controls.opts, realizerFn = controls.realizerFn;
  opts.notice = uplink;
  readyCount = 0;
  phraseRecursor = phrase.createRoot(opts, function(token) {
    _this.token = token;
    if (opts.standalone) {
      return _this.token.on('ready', function() {
        return _this.token.run({
          uuid: opts.uuid
        }).then(function(result) {
          return uplink.event('result', result);
        }, function(error) {
          return uplink.event('error', error);
        });
      });
    }
  });
  load = function() {
    return phraseRecursor('realizer', realizerFn);
  };
  if (opts.standalone) {
    return load();
  }
  return uplink.use({
    title: 'realizer control switch'
  }, function(next, capsule, traverse) {
    var err, job, key, params, uuid;
    if (capsule._type !== 'realize') {
      return next();
    }
    switch (capsule.direction) {
      case 'out':
        capsule.uuid = opts.uuid;
        capsule.pid = process.pid;
        capsule.hostname = hostname();
        console.log({
          SENDING: capsule.realize
        }, capsule);
        return next();
      case 'in':
        console.log({
          RECEIVING: capsule.realize
        }, capsule);
        switch (capsule.realize) {
          case 'reject':
            err = error({
              errno: 107,
              code: 'ENO',
              message: capsule.realize,
              detail: {}
            });
            for (key in capsule) {
              err.detail[key] = capsule[key];
            }
            reject(err);
            return next();
          case 'load':
            load().then(function(result) {
              return uplink.realize("ready::" + (++readyCount));
            }, function(error) {
              var payload;
              payload = {
                error: error.toString()
              };
              try {
                payload.stack = error.stack;
              } catch (_error) {}
              return uplink.realize('error', payload);
            });
            return next();
          case 'run':
            if (!(uuid = capsule.uuid)) {
              return next();
            }
            job = {
              uuid: uuid
            };
            params = capsule.params || {};
            console.log({
              RUN: uuid
            });
            console.log({
              TODO: 'job.run() with optional input of JobUUID'
            });
            _this.token.run(job, params).then(function(result) {
              return console.log({
                JOB_RESULT: result
              });
            }, function(error) {
              return console.log({
                JOB_ERROR: error
              });
            });
            return next();
        }
        return next();
    }
  });
});
