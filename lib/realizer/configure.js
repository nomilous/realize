// Generated by CoffeeScript 1.6.3
var coffee, configure, deferred, error, fs, pipeline, _ref;

_ref = require('also'), deferred = _ref.deferred, pipeline = _ref.pipeline;

fs = require('fs');

error = require('./error');

coffee = require('coffee-script');

module.exports = configure = deferred(function(action, params) {
  var compile, connect, filename, https, interpret, marshal, notify, port, read, reject, resolve, validate;
  if (params == null) {
    params = {};
  }
  resolve = action.resolve, reject = action.reject, notify = action.notify;
  filename = params.filename, connect = params.connect, port = params.port, https = params.https;
  validate = deferred(function(_arg) {
    var reject, resolve;
    resolve = _arg.resolve, reject = _arg.reject;
    if (filename != null) {
      return resolve();
    }
    return reject(error({
      errno: 101,
      code: 'ENOARG',
      message: 'No realizer specified. (-f <file>)'
    }));
  });
  read = deferred(function(_arg) {
    var reject, resolve;
    resolve = _arg.resolve, reject = _arg.reject;
    return fs.readFile(filename, 'utf8', function(err, content) {
      if (err != null) {
        return reject(err);
      }
      return resolve(content);
    });
  });
  compile = deferred(function(_arg, source) {
    var err, reject, resolve;
    resolve = _arg.resolve, reject = _arg.reject;
    try {
      return resolve(coffee.compile(source, {
        bare: true
      }));
    } catch (_error) {
      err = _error;
      return reject(error({
        errno: 102,
        code: 'ENOCOMPILE',
        message: err.toString(),
        detail: {
          location: err.location
        }
      }));
    }
  });
  interpret = deferred(function(_arg, realizer) {
    var err, reject, resolve;
    resolve = _arg.resolve, reject = _arg.reject;
    try {
      return resolve(eval(realizer));
    } catch (_error) {
      err = _error;
      return reject(error({
        errno: 103,
        code: 'ENOEVAL',
        message: err.toString()
      }));
    }
  });
  marshal = deferred(function(_arg, object) {
    var hostname, realzerFn, reject, resolve, transport, _base;
    resolve = _arg.resolve, reject = _arg.reject;
    if (!((object != null) && (object.title != null) && typeof object.title === 'string' && (object.uuid != null) && typeof object.uuid === 'string' && (object.realize != null) && typeof object.realize && 'function')) {
      return reject(error({
        errno: 104,
        code: 'ENOREALIZER',
        message: 'Realizer requires title, uuid and realize function'
      }));
    }
    realzerFn = object.realize;
    if (connect) {
      if (!((port != null) || ((object.connect != null) && (object.connect.url != null)))) {
        return reject(error({
          errno: 105,
          code: 'ENOPORT',
          message: 'Realizer requires port',
          suggest: 'use -p nnnn or realizer.connect.port'
        }));
      }
      object.connect || (object.connect = {});
      if (process.env.SECRET != null) {
        object.connect.secret = process.env.SECRET;
      } else {
        if ((_base = object.connect).secret == null) {
          _base.secret = '';
        }
      }
      transport = https ? 'https' : 'http';
      if (typeof hostname === "undefined" || hostname === null) {
        hostname = 'localhost';
      }
      if (object.connect.url == null) {
        object.connect.url = "" + transport + "://" + (hostname || 'localhost') + ":" + port;
      }
      object.connect.adaptor = 'socket.io';
    }
    delete object.realize;
    return resolve({
      opts: object,
      realizerFn: realzerFn
    });
  });
  return process.nextTick(function() {
    return pipeline([
      function() {
        return validate();
      }, function() {
        return read();
      }, function(source) {
        return compile(source);
      }, function(realizer) {
        return interpret(realizer);
      }, function(object) {
        return marshal(object);
      }
    ]).then(resolve, reject, notify);
  });
});
